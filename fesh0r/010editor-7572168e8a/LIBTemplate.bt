//--------------------------------------
//--- 010 Editor v3.2.2 Binary Template
//
// File: LIBTemplate
// Author: Andrew McRae
// Revision: 0.1
// Purpose: Parse MS lib files
//--------------------------------------

typedef uint64 u8;
typedef uint32 u4;
typedef uint16 u2;
typedef ubyte  u1;
typedef int64  s8;
typedef int32  s4;
typedef int16  s2;
typedef byte   s1;

typedef struct {
    SetBackColor(0xe8e8e8);
    if (!FEof()) {
        local quad padding = 2 - (FTell() & 1);

        if (padding > 0 && padding < 2) {
            u1 p;
        }
    }
} PADDING2 <optimize=false,hidden=true>;

typedef struct {
    char name[16];
    char date[12];
    char user[6];
    char group[6];
    char mode[8];
    char size[10];
    char end[2];
    local int _size = Atoi(size);
} HEADER <read=read_HEADER>;

string read_HEADER(HEADER &in) {
    string out;
    SPrintf(out, "%s %d", in.name, in._size);
    return out;
}

typedef struct {
    string d;
} str <read=read_str,optimize=false>;

string read_str(str &in) {
    return in.d;
}

typedef struct {
    BigEndian();

    HEADER h;

    u4 size;
    if (size) {
        u4 offset[size];
        str name[size];
    }
} LINKER1 <read=read_LINKER1,optimize=false>;

string read_LINKER1(LINKER1 &in) {
    return read_HEADER(in.h);
}

typedef struct {
    LittleEndian();

    HEADER h;

    u4 size;
    if (size) {
        u4 offset[size];
    }
    u4 symbols;
    if (symbols) {
        u2 index[symbols];
        str name[symbols];
    }
} LINKER2 <read=read_LINKER2,optimize=false>;

string read_LINKER2(LINKER2 &in) {
    return read_HEADER(in.h);
}

typedef struct {
    LittleEndian();

    HEADER h;

    local int64 start = FTell();
    local int64 offset = 0;

    while (offset < h._size) {
        str name;
        offset = FTell() - start;
    }
} LONGNAMES <read=read_LONGNAMES,optimize=false>;

string read_LONGNAMES(LONGNAMES &in) {
    return read_HEADER(in.h);
}

typedef struct {
    LittleEndian();

    HEADER h;

    if (h._size) {
        u1 d[h._size];
    }
} ENTRY <read=read_ENTRY,optimize=false>;

string read_ENTRY(ENTRY &in) {
    string out;
    string name = in.h.name;
    int slash_pos = Strchr(name, '/');
    int len = Strlen(name);
    if (slash_pos > 0) {
        name = SubStr(name, 0, slash_pos);
    }
    else if (slash_pos == 0) {
        int offset = Atoi(SubStr(name, 1));
        name = ReadString(n.start + offset);
    }
    SPrintf(out, "%s %d", name, in.h._size);
    return out;
}

DisplayFormatHex();
LittleEndian();

local uchar _sig[8];
ReadBytes(_sig, 0, 8);

if (_sig != "!<arch>\n") {
    Printf("Invalid signature\n");
    Warning("Invalid signature");
    return -1;
}

SetBackColor(0xd0d0d0);
char sig[8];

LINKER1 l1;

PADDING2 p;
LINKER2 l2;

PADDING2 p;
LONGNAMES n;

while (!FEof()) {
    PADDING2 p;
    if (!FEof()) {
        ENTRY e;
    }
}
