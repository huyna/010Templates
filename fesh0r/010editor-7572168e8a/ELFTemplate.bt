//----------------------------------------
//--- 010 Editor v2.0 Binary Template
//
// File:     ELFTemplate.bt
// Author:
// Revision: 1.0
// Purpose:  Defines a template for
//    parsing ELF 32-bit and 64-bit files.
//    It parses only the execution view
//    used for instantiating processes.
//----------------------------------------

DisplayFormatHex();
LittleEndian();

local int i;
local quad cur_offset;
local quad shstrtab_offset;

// Define structures used in ELF files

// ELF Header Types
// ELF identification element
typedef enum <uchar> {
    ELFCLASSNONE    =0,
    ELFCLASS32  =1,
    ELFCLASS64  =2
} ei_class_2_e;

typedef enum <uchar> {
    ELFDATAONE  =0,
    ELFDATA2LSB =1,
    ELFDATA2MSB =2
} ei_data_e;

typedef enum <uchar> {
    E_NONE      =0,
    E_CURRENT   =1
} ei_version_e;

typedef enum <uchar> {
    ELFOSABI_NONE   =0, //No extensions or unspecified
    ELFOSABI_HPUX   =1, //Hewlett-Packard HP-UX
    ELFOSABI_NETBSD =2, //NetBSD
    ELFOSABI_SOLARIS=6, //Sun Solaris
    ELFOSABI_AIX    =7, //AIX
    ELFOSABI_IRIX   =8, //IRIX
    ELFOSABI_FREEBSD=9, //FreeBSD
    ELFOSABI_TRU64  =10,    //Compaq TRU64 UNIX
    ELFOSABI_MODESTO=11,    //Novell Modesto
    ELFOSABI_OPENBSD=12,    //Open BSD
    ELFOSABI_OPENVMS=13,    //Open VMS
    ELFOSABI_NSK    =14,    //Hewlett-Packard Non-Stop Kernel
    ELFOSABI_AROS   =15,    //Amiga Research OS
    ELFOSABI_FENIXOS=16 //FenixOS
} ei_osabi_e;

typedef struct {
    char        file_identification[4];
    if (file_identification[0] != 0x7f || file_identification[1] != 'E'
        || file_identification[2] != 'L' || file_identification[3] != 'F') {
        Warning("Invalid ELF signature");
        Exit(-1);
    }
    ei_class_2_e    ei_class_2;
    ei_data_e   ei_data;
    if (ei_data == ELFDATA2MSB) {
        BigEndian();
    }
    ei_version_e    ei_version;
    ei_osabi_e  ei_osabi;
    uchar       ei_abiversion;
    uchar       ei_pad[6];
    uchar       ei_nident_SIZE;
} e_ident_t;

// Elf Data Types for 32/64 bit
//32 bit
typedef uint32 Elf32_Word;
typedef uint32 Elf32_Off;
typedef uint32 Elf32_Addr <read=VAddr32>;
typedef uint16 Elf32_Half;
typedef uint32 Elf32_Xword;
//64 bit
typedef uint32 Elf64_Word;
typedef uint64 Elf64_Off;
typedef uint64 Elf64_Addr <read=VAddr64>;
typedef uint16 Elf64_Half;
typedef uint64 Elf64_Xword;

string VAddr32( Elf32_Addr &addr ) {
    local char buf[128];
    SPrintf( buf, "0x%08X", addr );
    return buf;
}

string VAddr64( Elf64_Addr &addr ) {
    local char buf[128];
    SPrintf( buf, "0x%016LX", addr );
    return buf;
}

typedef enum <Elf32_Half> {
    ET_NONE     =0,
    ET_REL      =1,
    ET_EXEC     =2,
    ET_DYN      =3,
    ET_CORE     =4
} e_type32_e;
typedef e_type32_e e_type64_e;

typedef enum <Elf32_Half> { // list has to to be completed
    EM_NONE     =0, //No machine
    EM_M32      =1, //AT&T WE 32100
    EM_SPARC    =2, //SPARC
    EM_386      =3, //Intel 80386
    EM_68K      =4, //Motorola 68000
    EM_88K      =5, //Motorola 88000
    EM_reserved6    =6, //Reserved for future use (was EM_486)
    EM_860      =7, //Intel 80860
    EM_MIPS     =8, //MIPS I Architecture
    EM_S370     =9, //IBM System/370 Processor
    EM_MIPS_RS3_LE  =10,    //MIPS RS3000 Little-endian
    EM_reserved11   =11,    //Reserved for future use
    EM_reserved12   =12,    //Reserved for future use
    EM_reserved13   =13,    //Reserved for future use
    EM_reserved14   =14,    //Reserved for future use
    EM_PARISC   =15,    //Hewlett-Packard PA-RISC
    reserved16  =16,    //Reserved for future use
    EM_VPP500   =17,    //Fujitsu VPP500
    EM_SPARC32PLUS  =18,    //Enhanced instruction set SPARC
    EM_960      =19,    //Intel 80960
    EM_PPC      =20,    //PowerPC
    EM_PPC64    =21,    //64-bit PowerPC
    EM_S390     =22,    //IBM System/390 Processor
    EM_SPU      =23,    //IBM SPU/SPC
    EM_reserved24   =24,    //Reserved for future use
    EM_reserved25   =25,    //Reserved for future use
    EM_reserved26   =26,    //Reserved for future use
    EM_reserved27   =27,    //Reserved for future use
    EM_reserved28   =28,    //Reserved for future use
    EM_reserved29   =29,    //Reserved for future use
    EM_reserved30   =30,    //Reserved for future use
    EM_reserved31   =31,    //Reserved for future use
    EM_reserved32   =32,    //Reserved for future use
    EM_reserved33   =33,    //Reserved for future use
    EM_reserved34   =34,    //Reserved for future use
    EM_reserved35   =35,    //Reserved for future use
    EM_V800     =36,    //NEC V800
    EM_FR20     =37,    //Fujitsu FR20
    EM_RH32     =38,    //TRW RH-32
    EM_RCE      =39,    //Motorola RCE
    EM_ARM      =40,    //Advanced RISC Machines ARM
    EM_ALPHA    =41,    //Digital Alpha
    EM_SH       =42,    //Hitachi SH
    EM_SPARCV9  =43,    //SPARC Version 9
    EM_TRICORE  =44,    //Siemens TriCore embedded processor
    EM_ARC      =45,    //Argonaut RISC Core, Argonaut Technologies Inc.
    EM_H8_300   =46,    //Hitachi H8/300
    EM_H8_300H  =47,    //Hitachi H8/300H
    EM_H8S      =48,    //Hitachi H8S
    EM_H8_500   =49,    //Hitachi H8/500
    EM_IA_64    =50,    //Intel IA-64 processor architecture
    EM_MIPS_X   =51,    //Stanford MIPS-X
    EM_COLDFIRE =52,    //Motorola ColdFire
    EM_68HC12   =53,    //Motorola M68HC12
    EM_MMA      =54,    //Fujitsu MMA Multimedia Accelerator
    EM_PCP      =55,    //Siemens PCP
    EM_NCPU     =56,    //Sony nCPU embedded RISC processor
    EM_NDR1     =57,    //Denso NDR1 microprocessor
    EM_STARCORE =58,    //Motorola Star*Core processor
    EM_ME16     =59,    //Toyota ME16 processor
    EM_ST100    =60,    //STMicroelectronics ST100 processor
    EM_TINYJ    =61,    //Advanced Logic Corp. TinyJ embedded processor family
    EM_X86_64   =62,    //AMD x86-64 architecture
    EM_PDSP     =63,    //Sony DSP Processor
    EM_PDP10    =64,    //Digital Equipment Corp. PDP-10
    EM_PDP11    =65,    //Digital Equipment Corp. PDP-11
    EM_FX66     =66,    //Siemens FX66 microcontroller
    EM_ST9PLUS  =67,    //STMicroelectronics ST9+ 8/16 bit microcontroller
    EM_ST7      =68,    //STMicroelectronics ST7 8-bit microcontroller
    EM_68HC16   =69,    //Motorola MC68HC16 Microcontroller
    EM_68HC11   =70,    //Motorola MC68HC11 Microcontroller
    EM_68HC08   =71,    //Motorola MC68HC08 Microcontroller
    EM_68HC05   =72,    //Motorola MC68HC05 Microcontroller
    EM_SVX      =73,    //Silicon Graphics SVx
    EM_ST19     =75,    //Digital VAX
    EM_CRIS     =76,    //Axis Communications 32-bit embedded processor
    EM_JAVELIN  =77,    //Infineon Technologies 32-bit embedded processor
    EM_FIREPATH =78,    //Element 14 64-bit DSP Processor
    EM_ZSP      =79,    //LSI Logic 16-bit DSP Processor
    EM_MMIX     =80,    //Donald Knuth's educational 64-bit processor
    EM_HUANY    =81,    //Harvard University machine-independent object files
    EM_PRISM    =82,    //SiTera Prism
    EM_AVR      =83,    //Atmel AVR 8-bit microcontroller
    EM_FR30     =84,    //Fujitsu FR30
    EM_D10V     =85,    //Mitsubishi D10V
    EM_D30V     =86,    //Mitsubishi D30V
    EM_V850     =87,    //NEC v850
    EM_M32R     =88,    //Mitsubishi M32R
    EM_MN10300  =89,    //Matsushita MN10300
    EM_MN10200  =90,    //Matsushita MN10200
    EM_PJ       =91,    //picoJava
    EM_OPENRISC =92,    //OpenRISC 32-bit embedded processor
    EM_ARC_A5   =93,    //ARC Cores Tangent-A5
    EM_XTENSA   =94,    //Tensilica Xtensa Architecture
    EM_VIDEOCORE    =95,    //Alphamosaic VideoCore processor
    EM_TMM_GPP  =96,    //Thompson Multimedia General Purpose Processor
    EM_NS32K    =97,    //National Semiconductor 32000 series
    EM_TPC      =98,    //Tenor Network TPC processor
    EM_SNP1K    =99,    //Trebia SNP 1000 processor
    EM_ST200    =100,   //STMicroelectronics (www.st.com) ST200 microcontroller
    EM_IP2K     =101,   //Ubicom IP2xxx microcontroller family
    EM_MAX      =102,   //MAX Processor
    EM_CR       =103,   //National Semiconductor CompactRISC microprocessor
    EM_F2MC16   =104,   //Fujitsu F2MC16
    EM_MSP430   =105,   //Texas Instruments embedded microcontroller msp430
    EM_BLACKFIN =106,   //Analog Devices Blackfin (DSP) processor
    EM_SE_C33   =107,   //S1C33 Family of Seiko Epson processors
    EM_SEP      =108,   //Sharp embedded microprocessor
    EM_ARCA     =109,   //Arca RISC Microprocessor
    EM_UNICORE  =110,   //Microprocessor series from PKU-Unity Ltd. and MPRC of Peking University
    EM_EXCESS   =111,   //eXcess: 16/32/64-bit configurable embedded CPU
    EM_DXP      =112,   //Icera Semiconductor Inc. Deep Execution Processor
    EM_ALTERA_NIOS2 =113,   //Altera Nios II soft-core processor
    EM_CRX      =114,   //National Semiconductor CompactRISC CRX microprocessor
    EM_XGATE    =115,   //Motorola XGATE embedded processor
    EM_C166     =116,   //Infineon C16x/XC16x processor
    EM_M16C     =117,   //Renesas M16C series microprocessors
    EM_DSPIC30F =118,   //Microchip Technology dsPIC30F Digital Signal Controller
    EM_CE       =119,   //Freescale Communication Engine RISC core
    EM_M32C     =120,   //Renesas M32C series microprocessors
    EM_reserved121  =121,   //Reserved for future use
    EM_reserved122  =122,   //Reserved for future use
    EM_reserved123  =123,   //Reserved for future use
    EM_reserved124  =124,   //Reserved for future use
    EM_reserved125  =125,   //Reserved for future use
    EM_reserved126  =126,   //Reserved for future use
    EM_reserved127  =127,   //Reserved for future use
    EM_reserved128  =128,   //Reserved for future use
    EM_reserved129  =129,   //Reserved for future use
    EM_reserved130  =130,   //Reserved for future use
    EM_TSK3000  =131,   //Altium TSK3000 core
    EM_RS08     =132,   //Freescale RS08 embedded processor
    EM_reserved133  =133,   //Reserved for future Analog Devices DSP microprocessor
    EM_ECOG2    =134,   //Cyan Technology eCOG2 microprocessor
    EM_SCORE7   =135,   //Sunplus S+core7 RISC processor
    EM_DSP24    =136,   //New Japan Radio (NJR) 24-bit DSP Processor
    EM_VIDEOCORE3   =137,   //Broadcom VideoCore III processor
    EM_LATTICEMICO32=138,   //RISC processor for Lattice FPGA architecture
    EM_SE_C17   =139,   //Seiko Epson C17 family
    EM_TI_C6000 =140,   //The Texas Instruments TMS320C6000 DSP family
    EM_TI_C2000 =141,   //The Texas Instruments TMS320C2000 DSP family
    EM_TI_C5500 =142,   //The Texas Instruments TMS320C55x DSP family
    EM_reserved143  =143,   //Reserved for future use
    EM_reserved144  =144,   //Reserved for future use
    EM_reserved145  =145,   //Reserved for future use
    EM_reserved146  =146,   //Reserved for future use
    EM_reserved147  =147,   //Reserved for future use
    EM_reserved148  =148,   //Reserved for future use
    EM_reserved149  =149,   //Reserved for future use
    EM_reserved150  =150,   //Reserved for future use
    EM_reserved151  =151,   //Reserved for future use
    EM_reserved152  =152,   //Reserved for future use
    EM_reserved153  =153,   //Reserved for future use
    EM_reserved154  =154,   //Reserved for future use
    EM_reserved155  =155,   //Reserved for future use
    EM_reserved156  =156,   //Reserved for future use
    EM_reserved157  =157,   //Reserved for future use
    EM_reserved158  =158,   //Reserved for future use
    EM_reserved159  =159,   //Reserved for future use
    EM_MMDSP_PLUS   =160,   //STMicroelectronics 64bit VLIW Data Signal Processor
    EM_CYPRESS_M8C  =161,   //Cypress M8C microprocessor
    EM_R32C     =162,   //Renesas R32C series microprocessors
    EM_TRIMEDIA =163,   //NXP Semiconductors TriMedia architecture family
    EM_QDSP6    =164,   //QUALCOMM DSP6 Processor
    EM_8051     =165,   //Intel 8051 and variants
    EM_STXP7X   =166,   //STMicroelectronics STxP7x family of configurable and extensible RISC processors
    EM_NDS32    =167,   //Andes Technology compact code size embedded RISC processor family
    EM_ECOG1    =168,   //Cyan Technology eCOG1X family
    EM_ECOG1X   =168,   //Cyan Technology eCOG1X family
    EM_MAXQ30   =169,   //Dallas Semiconductor MAXQ30 Core Micro-controllers
    EM_XIMO16   =170,   //New Japan Radio (NJR) 16-bit DSP Processor
    EM_MANIK    =171,   //M2000 Reconfigurable RISC Microprocessor
    EM_CRAYNV2  =172,   //Cray Inc. NV2 vector architecture
    EM_RX       =173,   //Renesas RX family
    EM_METAG    =174,   //Imagination Technologies META processor architecture
    EM_MCST_ELBRUS  =175,   //MCST Elbrus general purpose hardware architecture
    EM_ECOG16   =176,   //Cyan Technology eCOG16 family
    EM_CR16     =177,   //National Semiconductor CompactRISC CR16 16-bit microprocessor
    EM_ETPU     =178,   //Freescale Extended Time Processing Unit
    EM_SLE9X    =179,   //Infineon Technologies SLE9X core
    EM_reserved180  =180,   //Reserved for future Intel use
    EM_reserved181  =181,   //Reserved for future Intel use
    EM_reserved182  =182,   //Reserved for future Intel use
    EM_reserved183  =183,   //Reserved for future ARM use
    EM_reserved184  =184,   //Reserved for future ARM use
    EM_AVR32    =185,   //Atmel Corporation 32-bit microprocessor family
    EM_STM8     =186,   //STMicroeletronics STM8 8-bit microcontroller
    EM_TILE64   =187,   //Tilera TILE64 multicore architecture family
    EM_TILEPRO  =188,   //Tilera TILEPro multicore architecture family
    EM_MICROBLAZE   =189,   //Xilinx MicroBlaze 32-bit RISC soft processor core
    EM_CUDA     =190,   //NVIDIA CUDA architecture
    EM_TILEGX   =191,   //Tilera TILE-Gx multicore architecture family
} e_machine32_e;
typedef e_machine32_e e_machine64_e;

typedef enum <Elf32_Word> {
    EV_NONE     =0,
    EV_CURRENT  =1
} e_version32_e;
typedef e_version32_e e_version64_e;

typedef struct {
    BitfieldDisablePadding();
    BitfieldRightToLeft();
    Elf32_Word EF_MIPS_NOREORDER:1; //0x00000001
    Elf32_Word EF_MIPS_PIC  :1; //0x00000002
    Elf32_Word EF_MIPS_CPIC :1; //0x00000004
    Elf32_Word EF_MIPS_XGOT :1; //0x00000008
    Elf32_Word EF_MIPS_UCODE:1; //0x00000010
    Elf32_Word EF_MIPS_ABI2 :1; //0x00000020
    Elf32_Word      :1; //0x00000040
    Elf32_Word EF_MIPS_OPTIONS_FIRST:1;//0x00000080
    Elf32_Word EF_MIPS_32BITMODE:1; //0x00000100
    Elf32_Word      :3; //0x00000e00
    Elf32_Word EF_MIPS_ABI  :4; //0x0000f000
    Elf32_Word EF_MIPS_MACH :8; //0x00ff0000
    Elf32_Word      :2; //0x03000000
    Elf32_Word EF_MIPS_ARCH_ASE_M16:1;//0x04000000
    Elf32_Word EF_MIPS_ARCH_ASE_MDMX:1;//0x08000000
    Elf32_Word EF_MIPS_ARCH :4; //0xf0000000
    BitfieldEnablePadding();
} e_flags32_e <read=e_flags32_e_READ>;
typedef e_flags32_e e_flags64_e;

string e_flags32_e_READ(e_flags32_e &in) {
    string out = "";
    if (in.EF_MIPS_NOREORDER) Strcat(out, "EF_MIPS_NOREORDER ");
    if (in.EF_MIPS_PIC) Strcat(out, "EF_MIPS_PIC ");
    if (in.EF_MIPS_CPIC) Strcat(out, "EF_MIPS_CPIC ");
    if (in.EF_MIPS_XGOT) Strcat(out, "EF_MIPS_XGOT ");
    if (in.EF_MIPS_UCODE) Strcat(out, "EF_MIPS_UCODE ");
    if (in.EF_MIPS_ABI2) Strcat(out, "EF_MIPS_ABI2 ");
    if (in.EF_MIPS_OPTIONS_FIRST) Strcat(out, "EF_MIPS_OPTIONS_FIRST ");
    if (in.EF_MIPS_32BITMODE) Strcat(out, "EF_MIPS_32BITMODE ");

    switch (in.EF_MIPS_ABI) {
        case 1:
            Strcat(out, "EF_MIPS_ABI_O32 ");
            break;
        case 2:
            Strcat(out, "EF_MIPS_ABI_O64 ");
            break;
        case 3:
            Strcat(out, "EF_MIPS_ABI_EABI32 ");
            break;
        case 4:
            Strcat(out, "EF_MIPS_ABI_EABI64 ");
            break;
        default:
            break;
    }

    switch (in.EF_MIPS_MACH) {
        case 0x81:
            Strcat(out, "EF_MIPS_MACH_3900 ");
            break;
        case 0x82:
            Strcat(out, "EF_MIPS_MACH_4010 ");
            break;
        case 0x83:
            Strcat(out, "EF_MIPS_MACH_4100 ");
            break;
        case 0x85:
            Strcat(out, "EF_MIPS_MACH_4650 ");
            break;
        case 0x87:
            Strcat(out, "EF_MIPS_MACH_4120 ");
            break;
        case 0x88:
            Strcat(out, "EF_MIPS_MACH_4111 ");
            break;
        case 0x8a:
            Strcat(out, "EF_MIPS_MACH_SB1 ");
            break;
        case 0x91:
            Strcat(out, "EF_MIPS_MACH_5400 ");
            break;
        case 0x92:
            Strcat(out, "EF_MIPS_MACH_5900 ");
            break;
        case 0x98:
            Strcat(out, "EF_MIPS_MACH_5500 ");
            break;
        default:
            break;
    }

    switch (in.EF_MIPS_ARCH) {
        case 0:
            Strcat(out, "EF_MIPS_ARCH_1 ");
            break;
        case 1:
            Strcat(out, "EF_MIPS_ARCH_2 ");
            break;
        case 2:
            Strcat(out, "EF_MIPS_ARCH_3 ");
            break;
        case 3:
            Strcat(out, "EF_MIPS_ARCH_4 ");
            break;
        case 4:
            Strcat(out, "EF_MIPS_ARCH_5 ");
            break;
        case 5:
            Strcat(out, "EF_MIPS_ARCH_32 ");
            break;
        case 6:
            Strcat(out, "EF_MIPS_ARCH_64 ");
            break;
        case 7:
            Strcat(out, "EF_MIPS_ARCH_32R2 ");
            break;
    }

    return out;
}

// Program Header Types
typedef enum <Elf32_Word> {
    PT_NULL     =0,
    PT_LOAD     =1,
    PT_DYNAMIC  =2,
    PT_INERP    =3,
    PT_NOTE     =4,
    PT_SHLIB    =5,
    PT_PHDR     =6,
    PT_TLS      =7,
    PT_MIPS_REGINFO =0x70000000,
    PT_MIPS_RTPROC  =0x70000001,
    PT_MIPS_OPTIONS =0x70000002,
    PT_MIPS_IRXHDR  =0x70000080
} p_type32_e;
typedef p_type32_e p_type64_e;

typedef enum <Elf32_Word> {
    ___ =0,
    __X =1,
    _W_ =2,
    _WX =3,
    R__ =4,
    R_X =5,
    RW_ =6,
    RWX =7
} p_flags32_e;
typedef p_flags32_e p_flags64_e;

// Program Table 32/64 bit
typedef struct { //32bit
    p_type32_e  p_type;
    Elf32_Off   p_offset_FROM_FILE_BEGIN;
    Elf32_Addr  p_vaddr_VIRTUAL_ADDRESS;
    Elf32_Addr  p_paddr_PHYSICAL_ADDRESS;
    Elf32_Word  p_filesz_SEGMENT_FILE_LENGTH;
    Elf32_Word  p_memsz_SEGMENT_RAM_LENGTH;
    p_flags32_e p_flags;
    Elf32_Word  p_align;

    if ((p_offset_FROM_FILE_BEGIN > 0) && (p_filesz_SEGMENT_FILE_LENGTH > 0)) {
        cur_offset = FTell();
        FSeek(p_offset_FROM_FILE_BEGIN);
        SetBackColor(0xff9090);
        ubyte data[p_filesz_SEGMENT_FILE_LENGTH];
        SetBackColor(0xffd0d0);
        FSeek(cur_offset);
    }
} program_table_entry32_t <read=program_table_entry32_READ>;
typedef struct { //64bit
    p_type64_e  p_type;
    p_flags64_e p_flags;
    Elf64_Off   p_offset_FROM_FILE_BEGIN;
    Elf64_Addr  p_vaddr_VIRTUAL_ADDRESS;
    Elf64_Addr  p_paddr_PHYSICAL_ADDRESS;
    Elf64_Xword p_filesz_SEGMENT_FILE_LENGTH;
    Elf64_Xword p_memsz_SEGMENT_RAM_LENGTH;
    Elf64_Xword p_align;

    if ((p_offset_FROM_FILE_BEGIN > 0) && (p_filesz_SEGMENT_FILE_LENGTH > 0)) {
        cur_offset = FTell();
        FSeek(p_offset_FROM_FILE_BEGIN);
        SetBackColor(0xff9090);
        ubyte data[p_filesz_SEGMENT_FILE_LENGTH];
        SetBackColor(0xffe0e0);
        FSeek(cur_offset);
    }
} program_table_entry64_t <read=program_table_entry64_READ>;

string program_table_entry32_READ(program_table_entry32_t &in) {
    string out;
    out = EnumToString(in.p_type);

    if (out == "") {
        if ((in.p_type >= 0x60000000) && (in.p_type <= 0x6fffffff)) {
            SPrintf(out, "PT_OS (%xh)", in.p_type);
        }
        else if ((in.p_type >= 0x70000000) && (in.p_type <= 0x7fffffff)) {
            SPrintf(out, "PT_PROC (%xh)", in.p_type);
        }
        else {
            SPrintf(out, "unknown (%xh)", in.p_type);
        }
    }

    return out;
}

string program_table_entry64_READ(program_table_entry64_t &in) {
    string out;
    out = EnumToString(in.p_type);

    if (out == "") {
        if ((in.p_type >= 0x60000000) && (in.p_type <= 0x6fffffff)) {
            SPrintf(out, "PT_OS (%xh)", in.p_type);
        }
        else if ((in.p_type >= 0x70000000) && (in.p_type <= 0x7fffffff)) {
            SPrintf(out, "PT_PROC (%xh)", in.p_type);
        }
        else {
            SPrintf(out, "unknown (%xh)", in.p_type);
        }
    }

    return out;
}

// Section Header Types
typedef enum <Elf32_Word> {
    SHT_NULL    =0,
    SHT_PROGBITS    =1,
    SHT_SYMTAB  =2,
    SHT_STRTAB  =3,
    SHT_RELA    =4,
    SHT_HASH    =5,
    SHT_DYNAMIC =6,
    SHT_NOTE    =7,
    SHT_NOBITS  =8,
    SHT_REL     =9,
    SHT_SHLIB   =10,
    SHT_DYNSYM  =11,
    SHT_INIT_ARRAY  =14,
    SHT_FINI_ARRAY  =15,
    SHT_PREINIT_ARRAY=16,
    SHT_GROUP   =17,
    SHT_SYMTAB_SHNDX=18,
    SHT_MIPS_LIBLIST=0x70000000,
    SHT_MIPS_MSYM   =0x70000001,
    SHT_MIPS_CONFLICT=0x70000002,
    SHT_MIPS_GPTAB  =0x70000003,
    SHT_MIPS_UCODE  =0x70000004,
    SHT_MIPS_DEBUG  =0x70000005,
    SHT_MIPS_REGINFO=0x70000006,
    SHT_MIPS_PACKAGE=0x70000007,
    SHT_MIPS_PACKSYM=0x70000008,
    SHT_MIPS_RELD   =0x70000009,
    SHT_MIPS_IFACE  =0x7000000b,
    SHT_MIPS_CONTENT=0x7000000c,
    SHT_MIPS_OPTIONS=0x7000000d,
    SHT_MIPS_SHDR   =0x70000010,
    SHT_MIPS_FDESC  =0x70000011,
    SHT_MIPS_EXTSYM =0x70000012,
    SHT_MIPS_DENSE  =0x70000013,
    SHT_MIPS_PDESC  =0x70000014,
    SHT_MIPS_LOCSYM =0x70000015,
    SHT_MIPS_AUXSYM =0x70000016,
    SHT_MIPS_OPTSYM =0x70000017,
    SHT_MIPS_LOCSTR =0x70000018,
    SHT_MIPS_LINE   =0x70000019,
    SHT_MIPS_RFDESC =0x7000001a,
    SHT_MIPS_DELTASYM=0x7000001b,
    SHT_MIPS_DELTAINST=0x7000001c,
    SHT_MIPS_DELTACLASS=0x7000001d,
    SHT_MIPS_DWARF  =0x7000001e,
    SHT_MIPS_DELTADECL=0x7000001f,
    SHT_MIPS_SYMBOL_LIB=0x70000020,
    SHT_MIPS_EVENTS =0x70000021,
    SHT_MIPS_TRANSLATE=0x70000022,
    SHT_MIPS_PIXIE  =0x70000023,
    SHT_MIPS_XLATE  =0x70000024,
    SHT_MIPS_XLATE_DEBUG=0x70000025,
    SHT_MIPS_WHIRL  =0x70000026,
    SHT_MIPS_EH_REGION=0x70000027,
    SHT_MIPS_XLATE_OLD=0x70000028,
    SHT_MIPS_PDR_EXCEPTION=0x70000029,
    SHT_MIPS_IOPMOD =0x70000080,
    SHT_DVP_OVERLAY_TABLE=0x7ffff420,
    SHT_DVP_OVERLAY =0x7ffff421,
} s_type32_e;
typedef s_type32_e s_type64_e;

typedef struct {
    BitfieldDisablePadding();
    BitfieldRightToLeft();
    Elf32_Word SHF_WRITE        :1;
    Elf32_Word SHF_ALLOC        :1;
    Elf32_Word SHF_EXECINSTR    :1;
    Elf32_Word SHF_MERGE        :1;
    Elf32_Word SHF_STRINGS      :1;
    Elf32_Word SHF_INFO_LINK    :1;
    Elf32_Word SHF_LINK_ORDER   :1;
    Elf32_Word SHF_OS_NONCONFORMING :1;
    Elf32_Word SHF_GROUP        :1;
    Elf32_Word SHF_TLS      :1;
    Elf32_Word          :10;
    Elf32_Word SHF_OS       :4;
    Elf32_Word SHF_MIPS_NODUPES :1;
    Elf32_Word SHF_MIPS_NAMES   :1;
    Elf32_Word SHF_MIPS_LOCAL   :1;
    Elf32_Word SHF_MIPS_NOSTRIP :1;
    Elf32_Word SHF_MIPS_GPREL   :1;
    Elf32_Word SHF_MIPS_MERGE   :1;
    Elf32_Word SHF_MIPS_ADDR    :1;
    Elf32_Word SHF_MIPS_STRING  :1;
    BitfieldEnablePadding();
} s_flags32_b <read=s_flags32_b_READ>;
typedef struct {
    BitfieldDisablePadding();
    BitfieldRightToLeft();
    Elf64_Xword SHF_WRITE       :1;
    Elf64_Xword SHF_ALLOC       :1;
    Elf64_Xword SHF_EXECINSTR   :1;
    Elf64_Xword SHF_MERGE       :1;
    Elf64_Xword SHF_STRINGS     :1;
    Elf64_Xword SHF_INFO_LINK   :1;
    Elf64_Xword SHF_LINK_ORDER  :1;
    Elf64_Xword SHF_OS_NONCONFORMING:1;
    Elf64_Xword SHF_GROUP       :1;
    Elf64_Xword SHF_TLS     :1;
    Elf64_Xword         :10;
    Elf64_Xword SHF_OS      :4;
    Elf64_Xword SHF_MIPS_NODUPES    :1;
    Elf64_Xword SHF_MIPS_NAMES  :1;
    Elf64_Xword SHF_MIPS_LOCAL  :1;
    Elf64_Xword SHF_MIPS_NOSTRIP    :1;
    Elf64_Xword SHF_MIPS_GPREL  :1;
    Elf64_Xword SHF_MIPS_MERGE  :1;
    Elf64_Xword SHF_MIPS_ADDR   :1;
    Elf64_Xword SHF_MIPS_STRING :1;
    Elf64_Xword         :32;
    BitfieldEnablePadding();
} s_flags64_b <read=s_flags64_b_READ>;

string s_flags32_b_READ(s_flags32_b &in) {
    string out = "";
    if (in.SHF_WRITE) Strcat(out, "SHF_WRITE ");
    if (in.SHF_ALLOC) Strcat(out, "SHF_ALLOC ");
    if (in.SHF_EXECINSTR) Strcat(out, "SHF_EXECINSTR ");
    if (in.SHF_MERGE) Strcat(out, "SHF_MERGE ");
    if (in.SHF_STRINGS) Strcat(out, "SHF_STRINGS ");
    if (in.SHF_INFO_LINK) Strcat(out, "SHF_INFO_LINK ");
    if (in.SHF_LINK_ORDER) Strcat(out, "SHF_LINK_ORDER ");
    if (in.SHF_OS_NONCONFORMING) Strcat(out, "SHF_OS_NONCONFORMING ");
    if (in.SHF_GROUP) Strcat(out, "SHF_GROUP ");
    if (in.SHF_TLS) Strcat(out, "SHF_TLS ");
    if (in.SHF_OS > 0) SPrintf(out, "%sSHF_OS(%xh) ", out, in.SHF_OS);
    if (in.SHF_MIPS_NODUPES) Strcat(out, "SHF_MIPS_NODUPES ");
    if (in.SHF_MIPS_NAMES) Strcat(out, "SHF_MIPS_NAMES ");
    if (in.SHF_MIPS_LOCAL) Strcat(out, "SHF_MIPS_LOCAL ");
    if (in.SHF_MIPS_NOSTRIP) Strcat(out, "SHF_MIPS_NOSTRIP ");
    if (in.SHF_MIPS_GPREL) Strcat(out, "SHF_MIPS_GPREL ");
    if (in.SHF_MIPS_MERGE) Strcat(out, "SHF_MIPS_MERGE ");
    if (in.SHF_MIPS_ADDR) Strcat(out, "SHF_MIPS_ADDR ");
    if (in.SHF_MIPS_STRING) Strcat(out, "SHF_MIPS_STRING ");
    return out;
}

string s_flags64_b_READ(s_flags64_b &in) {
    string out = "";
    if (in.SHF_WRITE) Strcat(out, "SHF_WRITE ");
    if (in.SHF_ALLOC) Strcat(out, "SHF_ALLOC ");
    if (in.SHF_EXECINSTR) Strcat(out, "SHF_EXECINSTR ");
    if (in.SHF_MERGE) Strcat(out, "SHF_MERGE ");
    if (in.SHF_STRINGS) Strcat(out, "SHF_STRINGS ");
    if (in.SHF_INFO_LINK) Strcat(out, "SHF_INFO_LINK ");
    if (in.SHF_LINK_ORDER) Strcat(out, "SHF_LINK_ORDER ");
    if (in.SHF_OS_NONCONFORMING) Strcat(out, "SHF_OS_NONCONFORMING ");
    if (in.SHF_GROUP) Strcat(out, "SHF_GROUP ");
    if (in.SHF_TLS) Strcat(out, "SHF_TLS ");
    if (in.SHF_OS > 0) SPrintf(out, "%sSHF_OS(%xh) ", out, in.SHF_OS);
    if (in.SHF_MIPS_NODUPES) Strcat(out, "SHF_MIPS_NODUPES ");
    if (in.SHF_MIPS_NAMES) Strcat(out, "SHF_MIPS_NAMES ");
    if (in.SHF_MIPS_LOCAL) Strcat(out, "SHF_MIPS_LOCAL ");
    if (in.SHF_MIPS_NOSTRIP) Strcat(out, "SHF_MIPS_NOSTRIP ");
    if (in.SHF_MIPS_GPREL) Strcat(out, "SHF_MIPS_GPREL ");
    if (in.SHF_MIPS_MERGE) Strcat(out, "SHF_MIPS_MERGE ");
    if (in.SHF_MIPS_ADDR) Strcat(out, "SHF_MIPS_ADDR ");
    if (in.SHF_MIPS_STRING) Strcat(out, "SHF_MIPS_STRING ");
    return out;
}

// Section Table 32/64 bit
typedef struct {
    Elf32_Word  sh_name;
    s_type32_e  sh_type;
    s_flags32_b sh_flags;
    Elf32_Addr  sh_addr;
    Elf32_Off   sh_offset_FROM_FILE_BEGIN;
    Elf32_Word  sh_size_SEGMENT_FILE_LENGTH;
    Elf32_Word  sh_link <format=decimal>;
    Elf32_Word  sh_info;
    Elf32_Word  sh_addralign;
    Elf32_Word  sh_entsize;

    if ((sh_offset_FROM_FILE_BEGIN > 0) &&
        (sh_size_SEGMENT_FILE_LENGTH > 0) && (sh_type != SHT_NOBITS)) {
        cur_offset = FTell();
        FSeek(sh_offset_FROM_FILE_BEGIN);
        SetBackColor(0x9090ff);
        ubyte data[sh_size_SEGMENT_FILE_LENGTH];
        SetBackColor(0xe0e0ff);
        FSeek(cur_offset);
    }
} section_table_entry32_t <read=section_table_entry32_READ>;
typedef struct {
    Elf64_Word  sh_name;
    s_type64_e  sh_type;
    s_flags64_b sh_flags;
    Elf64_Addr  sh_addr;
    Elf64_Off   sh_offset_FROM_FILE_BEGIN;
    Elf64_Xword sh_size_SEGMENT_FILE_LENGTH;
    Elf64_Word  sh_link <format=decimal>;
    Elf64_Word  sh_info;
    Elf64_Xword sh_addralign;
    Elf64_Xword sh_entsize;

    if ((sh_offset_FROM_FILE_BEGIN > 0) &&
        (sh_size_SEGMENT_FILE_LENGTH > 0) && (sh_type != SHT_NOBITS)) {
        cur_offset = FTell();
        FSeek(sh_offset_FROM_FILE_BEGIN);
        SetBackColor(0x9090ff);
        ubyte data[sh_size_SEGMENT_FILE_LENGTH];
        SetBackColor(0xe0e0ff);
        FSeek(cur_offset);
    }
} section_table_entry64_t <read=section_table_entry64_READ>;

string section_table_entry32_READ(section_table_entry32_t &in) {
    string out;
    out = EnumToString(in.sh_type);

    if (out == "") {
        if ((in.sh_type >= 0x60000000) && (in.sh_type <= 0x6fffffff)) {
            SPrintf(out, "SHT_OS (%xh) ", in.sh_type);
        }
        else if ((in.sh_type >= 0x70000000) && (in.sh_type <= 0x7fffffff)) {
            SPrintf(out, "SHT_PROC (%xh) ", in.sh_type);
        }
        else if ((in.sh_type >= 0x80000000) && (in.sh_type <= 0xffffffff)) {
            SPrintf(out, "SHT_USER (%xh) ", in.sh_type);
        }
        else {
            SPrintf(out, "unknown (%xh) ", in.sh_type);
        }
    }

    if (shstrtab_offset > 0) {
        SPrintf(out, "\"%s\" %s ", ReadString(shstrtab_offset + in.sh_name), out);
    }

    return out;
}

string section_table_entry64_READ(section_table_entry64_t &in) {
    string out;
    out = EnumToString(in.sh_type);

    if (out == "") {
        if ((in.sh_type >= 0x60000000) && (in.sh_type <= 0x6fffffff)) {
            SPrintf(out, "SHT_OS (%xh) ", in.sh_type);
        }
        else if ((in.sh_type >= 0x70000000) && (in.sh_type <= 0x7fffffff)) {
            SPrintf(out, "SHT_PROC (%xh) ", in.sh_type);
        }
        else if ((in.sh_type >= 0x80000000) && (in.sh_type <= 0xffffffff)) {
            SPrintf(out, "SHT_USER (%xh) ", in.sh_type);
        }
        else {
            SPrintf(out, "unknown (%xh) ", in.sh_type);
        }
    }

    if (shstrtab_offset > 0) {
        SPrintf(out, "\"%s\" %s", ReadString(shstrtab_offset + in.sh_name), out);
    }

    return out;
}

// Structure of elf
struct FILE {
    SetBackColor(0xe0e0e0);
    struct ELF_HEADER {
        e_ident_t   e_ident;
        if (file.elf_header.e_ident.ei_class_2 == ELFCLASS64) {
            //64-Bit definitions of ELF Header
            e_type64_e  e_type;
            e_machine64_e   e_machine;
            e_version64_e   e_version;
            Elf64_Addr  e_entry_START_ADDRESS;
            Elf64_Off   e_phoff_PROGRAM_HEADER_OFFSET_IN_FILE;
            Elf64_Off   e_shoff_SECTION_HEADER_OFFSET_IN_FILE;
            e_flags32_e e_flags;
            Elf64_Half  e_ehsize_ELF_HEADER_SIZE;
            Elf64_Half  e_phentsize_PROGRAM_HEADER_ENTRY_SIZE_IN_FILE;
            Elf64_Half  e_phnum_NUMBER_OF_PROGRAM_HEADER_ENTRIES <format=decimal>;
            Elf64_Half  e_shentsize_SECTION_HEADER_ENTRY_SIZE;
            Elf64_Half  e_shnum_NUMBER_OF_SECTION_HEADER_ENTRIES <format=decimal>;
            Elf64_Half  e_shstrndx_STRING_TABLE_INDEX;
        }
        else {
            //32-Bit definitions of ELF Header
            e_type32_e  e_type;
            e_machine32_e   e_machine;
            e_version32_e   e_version;
            Elf32_Addr  e_entry_START_ADDRESS;
            Elf32_Off   e_phoff_PROGRAM_HEADER_OFFSET_IN_FILE;
            Elf32_Off   e_shoff_SECTION_HEADER_OFFSET_IN_FILE;
            e_flags64_e e_flags;
            Elf32_Half  e_ehsize_ELF_HEADER_SIZE;
            Elf32_Half  e_phentsize_PROGRAM_HEADER_ENTRY_SIZE_IN_FILE;
            Elf32_Half  e_phnum_NUMBER_OF_PROGRAM_HEADER_ENTRIES <format=decimal>;
            Elf32_Half  e_shentsize_SECTION_HEADER_ENTRY_SIZE;
            Elf32_Half  e_shnum_NUMBER_OF_SECTION_HEADER_ENTRIES <format=decimal>;
            Elf32_Half  e_shstrndx_STRING_TABLE_INDEX <format=decimal>;
        }
    } elf_header;
    if ((file.elf_header.e_phnum_NUMBER_OF_PROGRAM_HEADER_ENTRIES > 0) &&
        (file.elf_header.e_phoff_PROGRAM_HEADER_OFFSET_IN_FILE > 0)) {
        FSeek(file.elf_header.e_phoff_PROGRAM_HEADER_OFFSET_IN_FILE);
        SetBackColor(0xffd0d0);
        struct PROGRAM_HEADER_TABLE {
            if (file.elf_header.e_ident.ei_class_2 == ELFCLASS64) {
                //64-Bit definitions of Program Table
                program_table_entry64_t program_table_element[file.elf_header.e_phnum_NUMBER_OF_PROGRAM_HEADER_ENTRIES] <optimize=false>;
            }
            else {
                //32-Bit definitions of Program Table
                program_table_entry32_t program_table_element[file.elf_header.e_phnum_NUMBER_OF_PROGRAM_HEADER_ENTRIES] <optimize=false>;
            }
        } program_header_table;
    }
    else {
        Warning("Empty program header table");
    }
    if ((file.elf_header.e_shnum_NUMBER_OF_SECTION_HEADER_ENTRIES > 0) &&
        (file.elf_header.e_shoff_SECTION_HEADER_OFFSET_IN_FILE > 0)) {
        FSeek(file.elf_header.e_shoff_SECTION_HEADER_OFFSET_IN_FILE);
        SetBackColor(0xe0e0ff);
        struct SECTION_HEADER_TABLE {
            if (file.elf_header.e_ident.ei_class_2 == ELFCLASS64) {
                //64-Bit definitions of Section Table
                section_table_entry64_t section_table_element[file.elf_header.e_shnum_NUMBER_OF_SECTION_HEADER_ENTRIES] <optimize=false>;
            }
            else {
                //32-Bit definitions of Section Table
                section_table_entry32_t section_table_element[file.elf_header.e_shnum_NUMBER_OF_SECTION_HEADER_ENTRIES] <optimize=false>;
            }
        } section_header_table;
        if (file.elf_header.e_shstrndx_STRING_TABLE_INDEX > 0) {
            shstrtab_offset = file.section_header_table.section_table_element[file.elf_header.e_shstrndx_STRING_TABLE_INDEX].sh_offset_FROM_FILE_BEGIN;
        }
    }
    else {
        Warning("Empty section header table");
    }
} file;
