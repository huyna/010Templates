//-----------------------------------
//--- 010 Editor v3.0 Binary Template
//
// File:     FLVTemplate.bt
// Author:   lafei(indep@263.net)
// Revision: 2.1
// Purpose:  Defines a template for
//    parsing FLV files.
//-----------------------------------

DisplayFormatHex();
BigEndian();
BitfieldDisablePadding();

typedef struct {
    CHAR    Signature[3];
    UBYTE   Version;
    UBYTE   TypeFlagsReserved: 5;
    UBYTE   TypeFlagsAudio: 1;
    UBYTE   TypeFlagsReserved2: 1;
    UBYTE   TypeFlagsVideo: 1;
    UINT    DataOffset;
    UINT    PreviousTagSize <format=decimal>;
} HEADER;

string TagType_read(UINT &in) {
    switch (in) {
        case 8:
            return "Audio";
        case 9:
            return "Video";
        case 18:
            return "Script";
        default:
            return "Unknown";
    }
}

string SoundFormat_read(UINT &in) {
    string out;

    switch (in) {
        case 0:
            out = "Linear PCM";
            break;
        case 1:
            out = "ADPCM";
            break;
        case 2:
            out = "MP3";
            break;
        case 3:
            out = "Linear PCM le";
            break;
        case 4:
            out = "Nellymoser 16k";
            break;
        case 5:
            out = "Nellymoser 8k";
            break;
        case 6:
            out = "Nellymoser";
            break;
        case 7:
            out = "G.771 A-law";
            break;
        case 8:
            out = "G.771 mu-law";
            break;
        case 9:
            out = "Reserved";
            break;
        case 10:
            out = "AAC";
            break;
        case 11:
            out = "Speex";
            break;
        case 14:
            out = "MP3 8k";
            break;
        case 15:
            out = "Device";
            break;
        default:
            out = "Unknown";
            break;
    }
    SPrintf(out, "%s [%d]", out, in);

    return out;
}

string VideoFormat_read(UINT &in) {
    string out;

    switch (in) {
        case 1:
            out = "JPEG";
            break;
        case 2:
            out = "H.263";
            break;
        case 3:
            out = "Screen";
            break;
        case 4:
            out = "VP6";
            break;
        case 5:
            out = "VP6A";
            break;
        case 6:
            out = "Screen2";
            break;
        case 7:
            out = "AVC";
            break;
        default:
            out = "Unknown";
            break;
    }
    SPrintf(out, "%s [%d]", out, in);

    return out;
}

string FLVTAG_read(struct FLVTAG &in) {
    string out;
    out = TagType_read(in.TagType);
    switch (in.TagType) {
        case 8:
            SPrintf(out, "%s (%s)", out, SoundFormat_read(in.SoundFormat));
            break;
        case 9:
            SPrintf(out, "%s (%s)", out, VideoFormat_read(in.CodecID));
            break;
        case 18:
            break;
        default:
            break;
    }
    return out;
}

local INT TagLen;

typedef struct {
    local QUAD StartPos;
    local QUAD EndPos;

    StartPos = FTell();

    UINT    TagType : 8 <format=decimal,read=TagType_read>;
    UINT    DataSize : 24 <format=decimal>;
    UINT    Timestamp : 24;
    UINT    TimestampExtended : 8;
    UINT    StreamID : 24;

    TagLen = (INT)DataSize - 1;

    switch (TagType) {
        case 8: // audio
            UINT SoundFormat: 4 <format=decimal,read=SoundFormat_read>;
            UINT SoundRate: 2;
            UINT SoundSize: 1;
            UINT SoundType: 1;
            if (SoundFormat == 10) {
                --TagLen;
                UBYTE AACPacketType;
            }
            if (DataSize > 0 && TagLen > 0) {
                SetBackColor(0xc0ffff);
                UBYTE SoundData[TagLen];
                SetBackColor(0xe0e0e0);
            }
            break;
        case 9: // video
            UINT FrameType: 4;
            UINT CodecID: 4 <format=decimal,read=VideoFormat_read>;
            if (CodecID == 7) {
                TagLen -= 4;
                UINT AVCPacketType: 8;
                UINT CompositionTime: 24;
            }
            if (DataSize > 0 && TagLen > 0) {
                SetBackColor(0xffc0ff);
                UBYTE VideoData[TagLen];
                SetBackColor(0xe0e0e0);
            }
            break;
        case 18: // script
            TagLen++;
            if (DataSize > 0 && TagLen > 0) {
                SetBackColor(0xffffc0);
                UBYTE ScriptData[TagLen];
                SetBackColor(0xe0e0e0);
            }
            break;
    }
    EndPos = FTell();

    if (StreamID != 0) {
        Warning("StreamID != 0");
        Printf("StreamID != 0: %Lxh %u\n", StartPos, StreamID);
    }

    if ((StartPos + 11 + DataSize) != EndPos) {
        Warning("Tag overflow");
        Printf("Tag overflow: %Lxh %xh %xh\n", StartPos, StartPos + 11 + DataSize, EndPos);
        FSeek(StartPos + DataSize);
    }

    UINT PreviousTagSize <format=decimal>;

    if (PreviousTagSize != (DataSize + 11)) {
        Warning("Lastsize mismatch");
        Printf("Lastsize mismatch: %Lxh %u %u\n", StartPos, PreviousTagSize, (DataSize + 11));
    }
} FLVTAG <read=FLVTAG_read>;

SetBackColor(0xc0c0c0);
HEADER h;

if (h.Signature != "FLV" ) {
    Warning("File is not a FLV.");
    return -1;
}

if (h.Version != 1 ) {
    Warning("Unsupported FLV version.");
    return -1;
}

if (h.DataOffset != 9 ) {
    Warning("Unsupported FLV header.");
    return -1;
}

SetBackColor(0xe0e0e0);

while (!FEof()) {
    FLVTAG t;
}
