//--------------------------------------
//--- 010 Editor v3.2.2 Binary Template
//
// File: FXOTemplateNew
// Author: Andrew McRae
// Revision: 0.1
// Purpose: Parse binary FX 4/5 files
//--------------------------------------

DisplayFormatHex();

typedef uint64 u8;
typedef uint32 u4;
typedef uint16 u2;
typedef ubyte  u1;
typedef int64  s8;
typedef int32  s4;
typedef int16  s2;
typedef byte   s1;

local quad _data_start;

typedef struct {
    SetBackColor(cNone);
    if (FEof()) {
        return;
    }
    local quad padding = FTell() & 3;

    if (padding) {
        u1 p[padding];
    }
} PADDING4 <optimize=false,hidden=true>;

string read_sig(u4 &in) {
    string out;
    string ver;
    switch(in & 0xffff) {
        case 0x0901:
            ver = "fx_2_0";
            break;
        case 0x1001:
            ver = "fx_4_0";
            break;
        case 0x1011:
            ver = "fx_4_1";
            break;
        case 0x2001:
            ver = "fx_5_0";
            break;
        default:
            SPrintf(ver, "(%04X)", in & 0xffff);
            break;
    }
    SPrintf(out, "%s %s", IsBigEndian() ? "BE" : "LE", ver);
    return out;
}

typedef struct {
    u4 sig;
    u4 data_offset;
} HEADER <read=read_HEADER>;

string read_HEADER(HEADER &in) {
    return read_sig(in.sig);
}

typedef struct {
    SetBackColor(0xc0c0ff);
    u4 size;

    if (size) {
        SetBackColor(0xc0ffc0);
        char n[size];

        if (!FEof()) {
            local quad padding = 4 - (FTell() & 3);

            if (padding > 0  && padding < 4) {
                SetBackColor(0xe0ffe0);
                u1 p[padding] <hidden=true>;
            }
        }
    }
} D3DX_NAME <read=read_D3DX_NAME,optimize=false>;

string read_D3DX_NAME(D3DX_NAME &in) {
    if (in.size) {
        return in.n;
    }
    else {
        return "";
    }
}

typedef struct (int parent) {
    SetBackColor(0xc0c0ff);
    u4 type;
    u4 class;
    u4 name_offset;
    u4 semantic_offset;
    u4 element_count;

    local quad _cur_offset = FTell();

    FSeek(_data_start + name_offset);
    D3DX_NAME name;

    FSeek(_data_start + semantic_offset);
    D3DX_NAME semantic;

    FSeek(_cur_offset);
} D3DX_EFFECT_TYPEDEF <read=read_D3DX_EFFECT_TYPEDEF>;

string read_D3DX_EFFECT_TYPEDEF(D3DX_EFFECT_TYPEDEF &in) {
    return read_D3DX_NAME(in.name);
}

typedef struct {
    SetBackColor(0xc0c0ff);

} D3DX_EFFECT_VALUE;

typedef struct {
    u4 typedef_offset;
    u4 value_offset;

    local quad _cur_offset = FTell();

    FSeek(_data_start + typedef_offset);
    D3DX_EFFECT_TYPEDEF typedef_(false);

    FSeek(_data_start + value_offset);
    D3DX_EFFECT_VALUE value;

    FSeek(_cur_offset);
} D3DX_PARAMETER_ANNOTATION;

typedef struct {
    local int i;

    u4 typedef_offset;
    u4 value_offset;
    u4 flags;
    u4 annotation_count;

    for (i = 0; i < annotation_count; i++) {
        D3DX_PARAMETER_ANNOTATION a;
    }

    local quad _cur_offset = FTell();

    FSeek(_data_start + typedef_offset);
    D3DX_EFFECT_TYPEDEF typedef_(false);

    FSeek(_data_start + value_offset);
    D3DX_EFFECT_VALUE value;

    FSeek(_cur_offset);
} D3DX_PARAMETER <read=read_D3DX_PARAMETER,optimize=false>;

string read_D3DX_PARAMETER(D3DX_PARAMETER &in) {
    return read_D3DX_EFFECT_TYPEDEF(in.typedef_);
}

typedef struct {
    u4 operation;
    u4 index;
    u4 typedef_offset;
    u4 value_offset;

    local quad _cur_offset = FTell();

    FSeek(_data_start + typedef_offset);
    D3DX_EFFECT_TYPEDEF type(false);

    FSeek(_cur_offset);
} D3DX_STATE;

typedef struct {
    local int i;

    u4 name_offset;
    u4 annotation_count;
    u4 state_count;

    for (i = 0; i < annotation_count; i++) {
        D3DX_PARAMETER_ANNOTATION a;
    }

    for (i = 0; i < state_count; i++) {
        D3DX_STATE s;
    }

    local quad _cur_offset = FTell();

    FSeek(_data_start + name_offset);
    D3DX_NAME name;

    FSeek(_cur_offset);
} D3DX_PASS <read=read_D3DX_PASS,optimize=false>;

string read_D3DX_PASS(D3DX_PASS &in) {
    return read_D3DX_NAME(in.name);
}

typedef struct {
    local int i;

    u4 name_offset;
    u4 annotation_count;
    u4 pass_count;

    for (i = 0; i < annotation_count; i++) {
        D3DX_PARAMETER_ANNOTATION a;
    }

    for (i = 0; i < pass_count; i++) {
        D3DX_PASS p;
    }

    local quad _cur_offset = FTell();

    FSeek(_data_start + name_offset);
    D3DX_NAME name;

    FSeek(_cur_offset);
} D3DX_TECHNIQUE <read=read_D3DX_TECHNIQUE,optimize=false>;

string read_D3DX_TECHNIQUE(D3DX_TECHNIQUE &in) {
    return read_D3DX_NAME(in.name);
}

typedef struct {
    u4 offset;
} D3DX_STRING;

typedef struct {
    u4 technique_index;
    u4 index;
    u4 element_index;
    u4 state_index;
    u4 usage;
    u4 size;
    if (size) {
        u1 data[size];
    }
} D3DX_RESOURCE;

typedef struct {
    local int i;

    u4 parameter_count;
    u4 technique_count;
    u4 unknown;
    u4 object_count;

    for (i = 0; i < parameter_count; i++) {
        D3DX_PARAMETER p;
    }

    for (i = 0; i < technique_count; i++) {
        D3DX_TECHNIQUE t;
    }

    u4 string_count;
    u4 resource_count;

    for (i = 0; i < string_count; i++) {
        D3DX_STRING s;
    }

    for (i = 0; i < resource_count; i++) {
        D3DX_RESOURCE r;
    }
} D3DX_EFFECT <optimize=false>;

local u4 _sig, _ver;
LittleEndian();
_sig = ReadUInt(0);

if ((_sig & 0xffff0000) == 0xfeff0000) {
    LittleEndian();
}
else if ((_sig & 0xffff) == 0xfffe) {
    BigEndian();
    _sig = ReadUInt(0);
    Warning("BigEndian");
}
else {
    Warning("Bad sig!");
    Printf("Bad sig!\n");
    return -1;
}

_ver = _sig & 0xffff;
if (_ver > 0x0901) {
    Warning("Unsupported version!");
    Printf("Unsupported version! %04X\n", _ver);
    return -1;
}

SetBackColor(0xc0c0c0);
HEADER h;

SetBackColor(0xe8e8e8);
_data_start = FTell();
if (h.data_offset) {
    u1 d[h.data_offset];
}

SetBackColor(0xffd0d0);
D3DX_EFFECT e;
